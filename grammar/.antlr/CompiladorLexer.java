// Generated from /home/hector/6to/automatas_2/Compilador/grammar/Compilador.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
public class CompiladorLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		PR=1, IMPRESION=2, IF_BASICO=3, ELSE=4, ELSE_IF=5, WHILE=6, INT=7, FLOAT=8, 
		CHAR=9, MUL=10, DIV=11, ADD=12, SUB=13, ASIGNACION=14, MAYORQ=15, MENORQ=16, 
		MAYOR_IGUAL=17, MENOR_IGUAL=18, IGUALDAD_DEBIL=19, IGUALDAD_FUERTE=20, 
		DIF_DEBIL=21, DIF_FUERTE=22, OR=23, AND=24, TPG=25, ALLAVE=26, CLLAVE=27, 
		APARENTESIS=28, CPARENTESIS=29, AADMIRACION=30, ID=31, NUM=32, CADENA=33, 
		DEC=34, SEMI=35, WS=36;
	public static String[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	private static String[] makeRuleNames() {
		return new String[] {
			"PR", "IMPRESION", "IF_BASICO", "ELSE", "ELSE_IF", "WHILE", "INT", "FLOAT", 
			"CHAR", "MUL", "DIV", "ADD", "SUB", "ASIGNACION", "MAYORQ", "MENORQ", 
			"MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD_DEBIL", "IGUALDAD_FUERTE", "DIF_DEBIL", 
			"DIF_FUERTE", "OR", "AND", "TPG", "ALLAVE", "CLLAVE", "APARENTESIS", 
			"CPARENTESIS", "AADMIRACION", "ID", "NUM", "CADENA", "DEC", "SEMI", "WS"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, "'leak'", "'si'", "'else'", "'elfito'", "'while'", "'nc'", 
			"'im'", "'jgl'", "'*'", "'/'", "'+'", "'-'", "'='", "'>'", "'<'", "'>='", 
			"'<='", "'=='", "'==='", "'!='", "'!=='", "'||'", "'&&'", "'W7HLM'", 
			"'{'", "'}'", "'('", "')'", "'!'", null, null, null, null, "';'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "PR", "IMPRESION", "IF_BASICO", "ELSE", "ELSE_IF", "WHILE", "INT", 
			"FLOAT", "CHAR", "MUL", "DIV", "ADD", "SUB", "ASIGNACION", "MAYORQ", 
			"MENORQ", "MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD_DEBIL", "IGUALDAD_FUERTE", 
			"DIF_DEBIL", "DIF_FUERTE", "OR", "AND", "TPG", "ALLAVE", "CLLAVE", "APARENTESIS", 
			"CPARENTESIS", "AADMIRACION", "ID", "NUM", "CADENA", "DEC", "SEMI", "WS"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public CompiladorLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Compilador.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getChannelNames() { return channelNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\u0004\u0000$\u00d1\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
		"!\u0002\"\u0007\"\u0002#\u0007#\u0001\u0000\u0001\u0000\u0001\u0000\u0003"+
		"\u0000M\b\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0001"+
		"\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001"+
		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001\b\u0001\b\u0001\b\u0001"+
		"\b\u0001\t\u0001\t\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001"+
		"\f\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000f\u0001\u000f\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013\u0001"+
		"\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001"+
		"\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001"+
		"\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
		"\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001"+
		"\u001b\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001"+
		"\u001e\u0004\u001e\u00ac\b\u001e\u000b\u001e\f\u001e\u00ad\u0001\u001f"+
		"\u0004\u001f\u00b1\b\u001f\u000b\u001f\f\u001f\u00b2\u0001 \u0001 \u0005"+
		" \u00b7\b \n \f \u00ba\t \u0001 \u0001 \u0001!\u0004!\u00bf\b!\u000b!"+
		"\f!\u00c0\u0001!\u0001!\u0004!\u00c5\b!\u000b!\f!\u00c6\u0001\"\u0001"+
		"\"\u0001#\u0004#\u00cc\b#\u000b#\f#\u00cd\u0001#\u0001#\u0001\u00b8\u0000"+
		"$\u0001\u0001\u0003\u0002\u0005\u0003\u0007\u0004\t\u0005\u000b\u0006"+
		"\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b\u0017\f\u0019\r\u001b\u000e"+
		"\u001d\u000f\u001f\u0010!\u0011#\u0012%\u0013\'\u0014)\u0015+\u0016-\u0017"+
		"/\u00181\u00193\u001a5\u001b7\u001c9\u001d;\u001e=\u001f? A!C\"E#G$\u0001"+
		"\u0000\u0003\u0004\u000009AZ__az\u0001\u000009\u0003\u0000\t\n\r\r  \u00d8"+
		"\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000\u0000"+
		"\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0000"+
		"\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000\u0000"+
		"\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000\u0011"+
		"\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000\u0015"+
		"\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000\u0019"+
		"\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000\u001d"+
		"\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000!\u0001"+
		"\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001\u0000\u0000"+
		"\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000\u0000\u0000"+
		"\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000\u0000/"+
		"\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u00003\u0001\u0000"+
		"\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0000"+
		"\u00009\u0001\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0000\u0000="+
		"\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000A\u0001\u0000"+
		"\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000E\u0001\u0000\u0000\u0000"+
		"\u0000G\u0001\u0000\u0000\u0000\u0001L\u0001\u0000\u0000\u0000\u0003N"+
		"\u0001\u0000\u0000\u0000\u0005S\u0001\u0000\u0000\u0000\u0007V\u0001\u0000"+
		"\u0000\u0000\t[\u0001\u0000\u0000\u0000\u000bb\u0001\u0000\u0000\u0000"+
		"\rh\u0001\u0000\u0000\u0000\u000fk\u0001\u0000\u0000\u0000\u0011n\u0001"+
		"\u0000\u0000\u0000\u0013r\u0001\u0000\u0000\u0000\u0015t\u0001\u0000\u0000"+
		"\u0000\u0017v\u0001\u0000\u0000\u0000\u0019x\u0001\u0000\u0000\u0000\u001b"+
		"z\u0001\u0000\u0000\u0000\u001d|\u0001\u0000\u0000\u0000\u001f~\u0001"+
		"\u0000\u0000\u0000!\u0080\u0001\u0000\u0000\u0000#\u0083\u0001\u0000\u0000"+
		"\u0000%\u0086\u0001\u0000\u0000\u0000\'\u0089\u0001\u0000\u0000\u0000"+
		")\u008d\u0001\u0000\u0000\u0000+\u0090\u0001\u0000\u0000\u0000-\u0094"+
		"\u0001\u0000\u0000\u0000/\u0097\u0001\u0000\u0000\u00001\u009a\u0001\u0000"+
		"\u0000\u00003\u00a0\u0001\u0000\u0000\u00005\u00a2\u0001\u0000\u0000\u0000"+
		"7\u00a4\u0001\u0000\u0000\u00009\u00a6\u0001\u0000\u0000\u0000;\u00a8"+
		"\u0001\u0000\u0000\u0000=\u00ab\u0001\u0000\u0000\u0000?\u00b0\u0001\u0000"+
		"\u0000\u0000A\u00b4\u0001\u0000\u0000\u0000C\u00be\u0001\u0000\u0000\u0000"+
		"E\u00c8\u0001\u0000\u0000\u0000G\u00cb\u0001\u0000\u0000\u0000IM\u0003"+
		"\r\u0006\u0000JM\u0003\u0011\b\u0000KM\u0003\u000f\u0007\u0000LI\u0001"+
		"\u0000\u0000\u0000LJ\u0001\u0000\u0000\u0000LK\u0001\u0000\u0000\u0000"+
		"M\u0002\u0001\u0000\u0000\u0000NO\u0005l\u0000\u0000OP\u0005e\u0000\u0000"+
		"PQ\u0005a\u0000\u0000QR\u0005k\u0000\u0000R\u0004\u0001\u0000\u0000\u0000"+
		"ST\u0005s\u0000\u0000TU\u0005i\u0000\u0000U\u0006\u0001\u0000\u0000\u0000"+
		"VW\u0005e\u0000\u0000WX\u0005l\u0000\u0000XY\u0005s\u0000\u0000YZ\u0005"+
		"e\u0000\u0000Z\b\u0001\u0000\u0000\u0000[\\\u0005e\u0000\u0000\\]\u0005"+
		"l\u0000\u0000]^\u0005f\u0000\u0000^_\u0005i\u0000\u0000_`\u0005t\u0000"+
		"\u0000`a\u0005o\u0000\u0000a\n\u0001\u0000\u0000\u0000bc\u0005w\u0000"+
		"\u0000cd\u0005h\u0000\u0000de\u0005i\u0000\u0000ef\u0005l\u0000\u0000"+
		"fg\u0005e\u0000\u0000g\f\u0001\u0000\u0000\u0000hi\u0005n\u0000\u0000"+
		"ij\u0005c\u0000\u0000j\u000e\u0001\u0000\u0000\u0000kl\u0005i\u0000\u0000"+
		"lm\u0005m\u0000\u0000m\u0010\u0001\u0000\u0000\u0000no\u0005j\u0000\u0000"+
		"op\u0005g\u0000\u0000pq\u0005l\u0000\u0000q\u0012\u0001\u0000\u0000\u0000"+
		"rs\u0005*\u0000\u0000s\u0014\u0001\u0000\u0000\u0000tu\u0005/\u0000\u0000"+
		"u\u0016\u0001\u0000\u0000\u0000vw\u0005+\u0000\u0000w\u0018\u0001\u0000"+
		"\u0000\u0000xy\u0005-\u0000\u0000y\u001a\u0001\u0000\u0000\u0000z{\u0005"+
		"=\u0000\u0000{\u001c\u0001\u0000\u0000\u0000|}\u0005>\u0000\u0000}\u001e"+
		"\u0001\u0000\u0000\u0000~\u007f\u0005<\u0000\u0000\u007f \u0001\u0000"+
		"\u0000\u0000\u0080\u0081\u0005>\u0000\u0000\u0081\u0082\u0005=\u0000\u0000"+
		"\u0082\"\u0001\u0000\u0000\u0000\u0083\u0084\u0005<\u0000\u0000\u0084"+
		"\u0085\u0005=\u0000\u0000\u0085$\u0001\u0000\u0000\u0000\u0086\u0087\u0005"+
		"=\u0000\u0000\u0087\u0088\u0005=\u0000\u0000\u0088&\u0001\u0000\u0000"+
		"\u0000\u0089\u008a\u0005=\u0000\u0000\u008a\u008b\u0005=\u0000\u0000\u008b"+
		"\u008c\u0005=\u0000\u0000\u008c(\u0001\u0000\u0000\u0000\u008d\u008e\u0005"+
		"!\u0000\u0000\u008e\u008f\u0005=\u0000\u0000\u008f*\u0001\u0000\u0000"+
		"\u0000\u0090\u0091\u0005!\u0000\u0000\u0091\u0092\u0005=\u0000\u0000\u0092"+
		"\u0093\u0005=\u0000\u0000\u0093,\u0001\u0000\u0000\u0000\u0094\u0095\u0005"+
		"|\u0000\u0000\u0095\u0096\u0005|\u0000\u0000\u0096.\u0001\u0000\u0000"+
		"\u0000\u0097\u0098\u0005&\u0000\u0000\u0098\u0099\u0005&\u0000\u0000\u0099"+
		"0\u0001\u0000\u0000\u0000\u009a\u009b\u0005W\u0000\u0000\u009b\u009c\u0005"+
		"7\u0000\u0000\u009c\u009d\u0005H\u0000\u0000\u009d\u009e\u0005L\u0000"+
		"\u0000\u009e\u009f\u0005M\u0000\u0000\u009f2\u0001\u0000\u0000\u0000\u00a0"+
		"\u00a1\u0005{\u0000\u0000\u00a14\u0001\u0000\u0000\u0000\u00a2\u00a3\u0005"+
		"}\u0000\u0000\u00a36\u0001\u0000\u0000\u0000\u00a4\u00a5\u0005(\u0000"+
		"\u0000\u00a58\u0001\u0000\u0000\u0000\u00a6\u00a7\u0005)\u0000\u0000\u00a7"+
		":\u0001\u0000\u0000\u0000\u00a8\u00a9\u0005!\u0000\u0000\u00a9<\u0001"+
		"\u0000\u0000\u0000\u00aa\u00ac\u0007\u0000\u0000\u0000\u00ab\u00aa\u0001"+
		"\u0000\u0000\u0000\u00ac\u00ad\u0001\u0000\u0000\u0000\u00ad\u00ab\u0001"+
		"\u0000\u0000\u0000\u00ad\u00ae\u0001\u0000\u0000\u0000\u00ae>\u0001\u0000"+
		"\u0000\u0000\u00af\u00b1\u0007\u0001\u0000\u0000\u00b0\u00af\u0001\u0000"+
		"\u0000\u0000\u00b1\u00b2\u0001\u0000\u0000\u0000\u00b2\u00b0\u0001\u0000"+
		"\u0000\u0000\u00b2\u00b3\u0001\u0000\u0000\u0000\u00b3@\u0001\u0000\u0000"+
		"\u0000\u00b4\u00b8\u0005\"\u0000\u0000\u00b5\u00b7\t\u0000\u0000\u0000"+
		"\u00b6\u00b5\u0001\u0000\u0000\u0000\u00b7\u00ba\u0001\u0000\u0000\u0000"+
		"\u00b8\u00b9\u0001\u0000\u0000\u0000\u00b8\u00b6\u0001\u0000\u0000\u0000"+
		"\u00b9\u00bb\u0001\u0000\u0000\u0000\u00ba\u00b8\u0001\u0000\u0000\u0000"+
		"\u00bb\u00bc\u0005\"\u0000\u0000\u00bcB\u0001\u0000\u0000\u0000\u00bd"+
		"\u00bf\u0007\u0001\u0000\u0000\u00be\u00bd\u0001\u0000\u0000\u0000\u00bf"+
		"\u00c0\u0001\u0000\u0000\u0000\u00c0\u00be\u0001\u0000\u0000\u0000\u00c0"+
		"\u00c1\u0001\u0000\u0000\u0000\u00c1\u00c2\u0001\u0000\u0000\u0000\u00c2"+
		"\u00c4\u0005.\u0000\u0000\u00c3\u00c5\u0007\u0001\u0000\u0000\u00c4\u00c3"+
		"\u0001\u0000\u0000\u0000\u00c5\u00c6\u0001\u0000\u0000\u0000\u00c6\u00c4"+
		"\u0001\u0000\u0000\u0000\u00c6\u00c7\u0001\u0000\u0000\u0000\u00c7D\u0001"+
		"\u0000\u0000\u0000\u00c8\u00c9\u0005;\u0000\u0000\u00c9F\u0001\u0000\u0000"+
		"\u0000\u00ca\u00cc\u0007\u0002\u0000\u0000\u00cb\u00ca\u0001\u0000\u0000"+
		"\u0000\u00cc\u00cd\u0001\u0000\u0000\u0000\u00cd\u00cb\u0001\u0000\u0000"+
		"\u0000\u00cd\u00ce\u0001\u0000\u0000\u0000\u00ce\u00cf\u0001\u0000\u0000"+
		"\u0000\u00cf\u00d0\u0006#\u0000\u0000\u00d0H\u0001\u0000\u0000\u0000\b"+
		"\u0000L\u00ad\u00b2\u00b8\u00c0\u00c6\u00cd\u0001\u0006\u0000\u0000";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}