// Generated from ./grammar/ArrayInit.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,14,98,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,3,3,41,8,3,1,4,
1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,4,7,59,8,7,11,
7,12,7,60,1,8,4,8,64,8,8,11,8,12,8,65,1,9,4,9,69,8,9,11,9,12,9,70,1,9,1,
9,4,9,75,8,9,11,9,12,9,76,1,10,1,10,5,10,81,8,10,10,10,12,10,84,9,10,1,10,
1,10,1,11,1,11,1,12,1,12,1,13,4,13,93,8,13,11,13,12,13,94,1,13,1,13,1,82,
0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
14,1,0,3,4,0,42,57,65,90,95,95,97,122,1,0,48,57,2,0,9,10,32,32,105,0,1,1,
0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,3,33,1,0,0,0,5,35,1,0,0,0,7,40,1,
0,0,0,9,42,1,0,0,0,11,46,1,0,0,0,13,52,1,0,0,0,15,58,1,0,0,0,17,63,1,0,0,
0,19,68,1,0,0,0,21,78,1,0,0,0,23,87,1,0,0,0,25,89,1,0,0,0,27,92,1,0,0,0,
29,30,5,84,0,0,30,31,5,80,0,0,31,32,5,71,0,0,32,2,1,0,0,0,33,34,5,123,0,
0,34,4,1,0,0,0,35,36,5,125,0,0,36,6,1,0,0,0,37,41,3,9,4,0,38,41,3,11,5,0,
39,41,3,13,6,0,40,37,1,0,0,0,40,38,1,0,0,0,40,39,1,0,0,0,41,8,1,0,0,0,42,
43,5,105,0,0,43,44,5,110,0,0,44,45,5,116,0,0,45,10,1,0,0,0,46,47,5,102,0,
0,47,48,5,108,0,0,48,49,5,111,0,0,49,50,5,97,0,0,50,51,5,116,0,0,51,12,1,
0,0,0,52,53,5,99,0,0,53,54,5,104,0,0,54,55,5,97,0,0,55,56,5,114,0,0,56,14,
1,0,0,0,57,59,7,0,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,0,0,0,60,61,1,
0,0,0,61,16,1,0,0,0,62,64,7,1,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,
0,0,65,66,1,0,0,0,66,18,1,0,0,0,67,69,7,1,0,0,68,67,1,0,0,0,69,70,1,0,0,
0,70,68,1,0,0,0,70,71,1,0,0,0,71,72,1,0,0,0,72,74,9,0,0,0,73,75,7,1,0,0,
74,73,1,0,0,0,75,76,1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,20,1,0,0,0,78,
82,5,34,0,0,79,81,9,0,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,83,1,0,0,0,82,80,
1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,5,34,0,0,86,22,1,0,0,0,87,88,5,
61,0,0,88,24,1,0,0,0,89,90,5,59,0,0,90,26,1,0,0,0,91,93,7,2,0,0,92,91,1,
0,0,0,93,94,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,6,13,
0,0,97,28,1,0,0,0,8,0,40,60,65,70,76,82,94,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class ArrayInitLexer extends antlr4.Lexer {

    static grammarFileName = "ArrayInit.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'TPG'", "'{'", "'}'", null, "'int'", "'float'", 
                         "'char'", null, null, null, null, "'='", "';'" ];
	static symbolicNames = [ null, null, null, null, "PR", "INT", "FLOAT", 
                          "CHAR", "ID", "NUM", "DEC", "CADENAS", "IGUAL", 
                          "SEMICOLON", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "PR", "INT", "FLOAT", "CHAR", 
                      "ID", "NUM", "DEC", "CADENAS", "IGUAL", "SEMICOLON", 
                      "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

ArrayInitLexer.EOF = antlr4.Token.EOF;
ArrayInitLexer.T__0 = 1;
ArrayInitLexer.T__1 = 2;
ArrayInitLexer.T__2 = 3;
ArrayInitLexer.PR = 4;
ArrayInitLexer.INT = 5;
ArrayInitLexer.FLOAT = 6;
ArrayInitLexer.CHAR = 7;
ArrayInitLexer.ID = 8;
ArrayInitLexer.NUM = 9;
ArrayInitLexer.DEC = 10;
ArrayInitLexer.CADENAS = 11;
ArrayInitLexer.IGUAL = 12;
ArrayInitLexer.SEMICOLON = 13;
ArrayInitLexer.WS = 14;



