// Generated from ./grammar/Compilador.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,36,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,1,0,1,0,1,0,3,0,77,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,
3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,
22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
1,27,1,28,1,28,1,29,1,29,1,30,4,30,172,8,30,11,30,12,30,173,1,31,4,31,177,
8,31,11,31,12,31,178,1,32,1,32,5,32,183,8,32,10,32,12,32,186,9,32,1,32,1,
32,1,33,4,33,191,8,33,11,33,12,33,192,1,33,1,33,4,33,197,8,33,11,33,12,33,
198,1,34,1,34,1,35,4,35,204,8,35,11,35,12,35,205,1,35,1,35,1,184,0,36,1,
1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,3,4,0,48,57,65,
90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,216,0,1,1,0,0,0,0,3,1,0,0,
0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,1,76,1,0,0,0,3,78,1,0,0,0,5,83,1,0,0,0,7,86,1,0,0,0,9,91,1,0,0,0,11,
98,1,0,0,0,13,104,1,0,0,0,15,107,1,0,0,0,17,110,1,0,0,0,19,114,1,0,0,0,21,
116,1,0,0,0,23,118,1,0,0,0,25,120,1,0,0,0,27,122,1,0,0,0,29,124,1,0,0,0,
31,126,1,0,0,0,33,128,1,0,0,0,35,131,1,0,0,0,37,134,1,0,0,0,39,137,1,0,0,
0,41,141,1,0,0,0,43,144,1,0,0,0,45,148,1,0,0,0,47,151,1,0,0,0,49,154,1,0,
0,0,51,160,1,0,0,0,53,162,1,0,0,0,55,164,1,0,0,0,57,166,1,0,0,0,59,168,1,
0,0,0,61,171,1,0,0,0,63,176,1,0,0,0,65,180,1,0,0,0,67,190,1,0,0,0,69,200,
1,0,0,0,71,203,1,0,0,0,73,77,3,13,6,0,74,77,3,17,8,0,75,77,3,15,7,0,76,73,
1,0,0,0,76,74,1,0,0,0,76,75,1,0,0,0,77,2,1,0,0,0,78,79,5,108,0,0,79,80,5,
101,0,0,80,81,5,97,0,0,81,82,5,107,0,0,82,4,1,0,0,0,83,84,5,115,0,0,84,85,
5,105,0,0,85,6,1,0,0,0,86,87,5,101,0,0,87,88,5,108,0,0,88,89,5,115,0,0,89,
90,5,101,0,0,90,8,1,0,0,0,91,92,5,101,0,0,92,93,5,108,0,0,93,94,5,102,0,
0,94,95,5,105,0,0,95,96,5,116,0,0,96,97,5,111,0,0,97,10,1,0,0,0,98,99,5,
119,0,0,99,100,5,104,0,0,100,101,5,105,0,0,101,102,5,108,0,0,102,103,5,101,
0,0,103,12,1,0,0,0,104,105,5,110,0,0,105,106,5,99,0,0,106,14,1,0,0,0,107,
108,5,105,0,0,108,109,5,109,0,0,109,16,1,0,0,0,110,111,5,106,0,0,111,112,
5,103,0,0,112,113,5,108,0,0,113,18,1,0,0,0,114,115,5,42,0,0,115,20,1,0,0,
0,116,117,5,47,0,0,117,22,1,0,0,0,118,119,5,43,0,0,119,24,1,0,0,0,120,121,
5,45,0,0,121,26,1,0,0,0,122,123,5,61,0,0,123,28,1,0,0,0,124,125,5,62,0,0,
125,30,1,0,0,0,126,127,5,60,0,0,127,32,1,0,0,0,128,129,5,62,0,0,129,130,
5,61,0,0,130,34,1,0,0,0,131,132,5,60,0,0,132,133,5,61,0,0,133,36,1,0,0,0,
134,135,5,61,0,0,135,136,5,61,0,0,136,38,1,0,0,0,137,138,5,61,0,0,138,139,
5,61,0,0,139,140,5,61,0,0,140,40,1,0,0,0,141,142,5,33,0,0,142,143,5,61,0,
0,143,42,1,0,0,0,144,145,5,33,0,0,145,146,5,61,0,0,146,147,5,61,0,0,147,
44,1,0,0,0,148,149,5,124,0,0,149,150,5,124,0,0,150,46,1,0,0,0,151,152,5,
38,0,0,152,153,5,38,0,0,153,48,1,0,0,0,154,155,5,87,0,0,155,156,5,55,0,0,
156,157,5,72,0,0,157,158,5,76,0,0,158,159,5,77,0,0,159,50,1,0,0,0,160,161,
5,123,0,0,161,52,1,0,0,0,162,163,5,125,0,0,163,54,1,0,0,0,164,165,5,40,0,
0,165,56,1,0,0,0,166,167,5,41,0,0,167,58,1,0,0,0,168,169,5,33,0,0,169,60,
1,0,0,0,170,172,7,0,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,
173,174,1,0,0,0,174,62,1,0,0,0,175,177,7,1,0,0,176,175,1,0,0,0,177,178,1,
0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,64,1,0,0,0,180,184,5,34,0,0,181,
183,9,0,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,185,1,0,0,0,184,182,1,0,
0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,188,5,34,0,0,188,66,1,0,0,0,189,
191,7,1,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,
0,0,193,194,1,0,0,0,194,196,5,46,0,0,195,197,7,1,0,0,196,195,1,0,0,0,197,
198,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,0,199,68,1,0,0,0,200,201,5,59,
0,0,201,70,1,0,0,0,202,204,7,2,0,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,
1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,208,6,35,0,0,208,72,1,0,0,0,
8,0,76,173,178,184,192,198,205,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompiladorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilador.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, "'leak'", "'si'", "'else'", "'elfito'", 
                         "'while'", "'nc'", "'im'", "'jgl'", "'*'", "'/'", 
                         "'+'", "'-'", "'='", "'>'", "'<'", "'>='", "'<='", 
                         "'=='", "'==='", "'!='", "'!=='", "'||'", "'&&'", 
                         "'W7HLM'", "'{'", "'}'", "'('", "')'", "'!'", null, 
                         null, null, null, "';'" ];
	static symbolicNames = [ null, "PR", "IMPRESION", "IF_BASICO", "ELSE", 
                          "ELSE_IF", "WHILE", "INT", "FLOAT", "CHAR", "MUL", 
                          "DIV", "ADD", "SUB", "ASIGNACION", "MAYORQ", "MENORQ", 
                          "MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD_DEBIL", 
                          "IGUALDAD_FUERTE", "DIF_DEBIL", "DIF_FUERTE", 
                          "OR", "AND", "TPG", "ALLAVE", "CLLAVE", "APARENTESIS", 
                          "CPARENTESIS", "AADMIRACION", "ID", "NUM", "CADENA", 
                          "DEC", "SEMI", "WS" ];
	static ruleNames = [ "PR", "IMPRESION", "IF_BASICO", "ELSE", "ELSE_IF", 
                      "WHILE", "INT", "FLOAT", "CHAR", "MUL", "DIV", "ADD", 
                      "SUB", "ASIGNACION", "MAYORQ", "MENORQ", "MAYOR_IGUAL", 
                      "MENOR_IGUAL", "IGUALDAD_DEBIL", "IGUALDAD_FUERTE", 
                      "DIF_DEBIL", "DIF_FUERTE", "OR", "AND", "TPG", "ALLAVE", 
                      "CLLAVE", "APARENTESIS", "CPARENTESIS", "AADMIRACION", 
                      "ID", "NUM", "CADENA", "DEC", "SEMI", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompiladorLexer.EOF = antlr4.Token.EOF;
CompiladorLexer.PR = 1;
CompiladorLexer.IMPRESION = 2;
CompiladorLexer.IF_BASICO = 3;
CompiladorLexer.ELSE = 4;
CompiladorLexer.ELSE_IF = 5;
CompiladorLexer.WHILE = 6;
CompiladorLexer.INT = 7;
CompiladorLexer.FLOAT = 8;
CompiladorLexer.CHAR = 9;
CompiladorLexer.MUL = 10;
CompiladorLexer.DIV = 11;
CompiladorLexer.ADD = 12;
CompiladorLexer.SUB = 13;
CompiladorLexer.ASIGNACION = 14;
CompiladorLexer.MAYORQ = 15;
CompiladorLexer.MENORQ = 16;
CompiladorLexer.MAYOR_IGUAL = 17;
CompiladorLexer.MENOR_IGUAL = 18;
CompiladorLexer.IGUALDAD_DEBIL = 19;
CompiladorLexer.IGUALDAD_FUERTE = 20;
CompiladorLexer.DIF_DEBIL = 21;
CompiladorLexer.DIF_FUERTE = 22;
CompiladorLexer.OR = 23;
CompiladorLexer.AND = 24;
CompiladorLexer.TPG = 25;
CompiladorLexer.ALLAVE = 26;
CompiladorLexer.CLLAVE = 27;
CompiladorLexer.APARENTESIS = 28;
CompiladorLexer.CPARENTESIS = 29;
CompiladorLexer.AADMIRACION = 30;
CompiladorLexer.ID = 31;
CompiladorLexer.NUM = 32;
CompiladorLexer.CADENA = 33;
CompiladorLexer.DEC = 34;
CompiladorLexer.SEMI = 35;
CompiladorLexer.WS = 36;



