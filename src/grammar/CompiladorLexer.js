// Generated from ./grammar/Compilador.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,35,202,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,1,0,1,0,1,0,3,0,75,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,
1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,
1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,4,
29,165,8,29,11,29,12,29,166,1,30,4,30,170,8,30,11,30,12,30,171,1,31,1,31,
5,31,176,8,31,10,31,12,31,179,9,31,1,31,1,31,1,32,4,32,184,8,32,11,32,12,
32,185,1,32,1,32,4,32,190,8,32,11,32,12,32,191,1,33,1,33,1,34,4,34,197,8,
34,11,34,12,34,198,1,34,1,34,1,177,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
65,33,67,34,69,35,1,0,3,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,
13,13,32,32,209,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,74,1,0,0,0,3,76,1,0,0,0,5,81,1,0,0,0,7,84,
1,0,0,0,9,89,1,0,0,0,11,97,1,0,0,0,13,100,1,0,0,0,15,103,1,0,0,0,17,107,
1,0,0,0,19,109,1,0,0,0,21,111,1,0,0,0,23,113,1,0,0,0,25,115,1,0,0,0,27,117,
1,0,0,0,29,119,1,0,0,0,31,121,1,0,0,0,33,124,1,0,0,0,35,127,1,0,0,0,37,130,
1,0,0,0,39,134,1,0,0,0,41,137,1,0,0,0,43,141,1,0,0,0,45,144,1,0,0,0,47,147,
1,0,0,0,49,153,1,0,0,0,51,155,1,0,0,0,53,157,1,0,0,0,55,159,1,0,0,0,57,161,
1,0,0,0,59,164,1,0,0,0,61,169,1,0,0,0,63,173,1,0,0,0,65,183,1,0,0,0,67,193,
1,0,0,0,69,196,1,0,0,0,71,75,3,11,5,0,72,75,3,15,7,0,73,75,3,13,6,0,74,71,
1,0,0,0,74,72,1,0,0,0,74,73,1,0,0,0,75,2,1,0,0,0,76,77,5,108,0,0,77,78,5,
101,0,0,78,79,5,97,0,0,79,80,5,107,0,0,80,4,1,0,0,0,81,82,5,105,0,0,82,83,
5,102,0,0,83,6,1,0,0,0,84,85,5,101,0,0,85,86,5,108,0,0,86,87,5,115,0,0,87,
88,5,101,0,0,88,8,1,0,0,0,89,90,5,101,0,0,90,91,5,108,0,0,91,92,5,115,0,
0,92,93,5,101,0,0,93,94,5,32,0,0,94,95,5,105,0,0,95,96,5,102,0,0,96,10,1,
0,0,0,97,98,5,110,0,0,98,99,5,99,0,0,99,12,1,0,0,0,100,101,5,105,0,0,101,
102,5,109,0,0,102,14,1,0,0,0,103,104,5,106,0,0,104,105,5,103,0,0,105,106,
5,108,0,0,106,16,1,0,0,0,107,108,5,42,0,0,108,18,1,0,0,0,109,110,5,47,0,
0,110,20,1,0,0,0,111,112,5,43,0,0,112,22,1,0,0,0,113,114,5,45,0,0,114,24,
1,0,0,0,115,116,5,61,0,0,116,26,1,0,0,0,117,118,5,62,0,0,118,28,1,0,0,0,
119,120,5,60,0,0,120,30,1,0,0,0,121,122,5,62,0,0,122,123,5,61,0,0,123,32,
1,0,0,0,124,125,5,60,0,0,125,126,5,61,0,0,126,34,1,0,0,0,127,128,5,61,0,
0,128,129,5,61,0,0,129,36,1,0,0,0,130,131,5,61,0,0,131,132,5,61,0,0,132,
133,5,61,0,0,133,38,1,0,0,0,134,135,5,33,0,0,135,136,5,61,0,0,136,40,1,0,
0,0,137,138,5,33,0,0,138,139,5,61,0,0,139,140,5,61,0,0,140,42,1,0,0,0,141,
142,5,124,0,0,142,143,5,124,0,0,143,44,1,0,0,0,144,145,5,38,0,0,145,146,
5,38,0,0,146,46,1,0,0,0,147,148,5,87,0,0,148,149,5,55,0,0,149,150,5,72,0,
0,150,151,5,76,0,0,151,152,5,77,0,0,152,48,1,0,0,0,153,154,5,123,0,0,154,
50,1,0,0,0,155,156,5,125,0,0,156,52,1,0,0,0,157,158,5,40,0,0,158,54,1,0,
0,0,159,160,5,41,0,0,160,56,1,0,0,0,161,162,5,33,0,0,162,58,1,0,0,0,163,
165,7,0,0,0,164,163,1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,
0,0,167,60,1,0,0,0,168,170,7,1,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,169,
1,0,0,0,171,172,1,0,0,0,172,62,1,0,0,0,173,177,5,34,0,0,174,176,9,0,0,0,
175,174,1,0,0,0,176,179,1,0,0,0,177,178,1,0,0,0,177,175,1,0,0,0,178,180,
1,0,0,0,179,177,1,0,0,0,180,181,5,34,0,0,181,64,1,0,0,0,182,184,7,1,0,0,
183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,187,
1,0,0,0,187,189,5,46,0,0,188,190,7,1,0,0,189,188,1,0,0,0,190,191,1,0,0,0,
191,189,1,0,0,0,191,192,1,0,0,0,192,66,1,0,0,0,193,194,5,59,0,0,194,68,1,
0,0,0,195,197,7,2,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,198,
199,1,0,0,0,199,200,1,0,0,0,200,201,6,34,0,0,201,70,1,0,0,0,8,0,74,166,171,
177,185,191,198,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompiladorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilador.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, null, "'leak'", "'if'", "'else'", "'else if'", 
                         "'nc'", "'im'", "'jgl'", "'*'", "'/'", "'+'", "'-'", 
                         "'='", "'>'", "'<'", "'>='", "'<='", "'=='", "'==='", 
                         "'!='", "'!=='", "'||'", "'&&'", "'W7HLM'", "'{'", 
                         "'}'", "'('", "')'", "'!'", null, null, null, null, 
                         "';'" ];
	static symbolicNames = [ null, "PR", "IMPRESION", "IF_BASICO", "ELSE", 
                          "ELSE_IF", "INT", "FLOAT", "CHAR", "MUL", "DIV", 
                          "ADD", "SUB", "ASIGNACION", "MAYORQ", "MENORQ", 
                          "MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD_DEBIL", 
                          "IGUALDAD_FUERTE", "DIF_DEBIL", "DIF_FUERTE", 
                          "OR", "AND", "TPG", "ALLAVE", "CLLAVE", "APARENTESIS", 
                          "CPARENTESIS", "AADMIRACION", "ID", "NUM", "CADENA", 
                          "DEC", "SEMI", "WS" ];
	static ruleNames = [ "PR", "IMPRESION", "IF_BASICO", "ELSE", "ELSE_IF", 
                      "INT", "FLOAT", "CHAR", "MUL", "DIV", "ADD", "SUB", 
                      "ASIGNACION", "MAYORQ", "MENORQ", "MAYOR_IGUAL", "MENOR_IGUAL", 
                      "IGUALDAD_DEBIL", "IGUALDAD_FUERTE", "DIF_DEBIL", 
                      "DIF_FUERTE", "OR", "AND", "TPG", "ALLAVE", "CLLAVE", 
                      "APARENTESIS", "CPARENTESIS", "AADMIRACION", "ID", 
                      "NUM", "CADENA", "DEC", "SEMI", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompiladorLexer.EOF = antlr4.Token.EOF;
CompiladorLexer.PR = 1;
CompiladorLexer.IMPRESION = 2;
CompiladorLexer.IF_BASICO = 3;
CompiladorLexer.ELSE = 4;
CompiladorLexer.ELSE_IF = 5;
CompiladorLexer.INT = 6;
CompiladorLexer.FLOAT = 7;
CompiladorLexer.CHAR = 8;
CompiladorLexer.MUL = 9;
CompiladorLexer.DIV = 10;
CompiladorLexer.ADD = 11;
CompiladorLexer.SUB = 12;
CompiladorLexer.ASIGNACION = 13;
CompiladorLexer.MAYORQ = 14;
CompiladorLexer.MENORQ = 15;
CompiladorLexer.MAYOR_IGUAL = 16;
CompiladorLexer.MENOR_IGUAL = 17;
CompiladorLexer.IGUALDAD_DEBIL = 18;
CompiladorLexer.IGUALDAD_FUERTE = 19;
CompiladorLexer.DIF_DEBIL = 20;
CompiladorLexer.DIF_FUERTE = 21;
CompiladorLexer.OR = 22;
CompiladorLexer.AND = 23;
CompiladorLexer.TPG = 24;
CompiladorLexer.ALLAVE = 25;
CompiladorLexer.CLLAVE = 26;
CompiladorLexer.APARENTESIS = 27;
CompiladorLexer.CPARENTESIS = 28;
CompiladorLexer.AADMIRACION = 29;
CompiladorLexer.ID = 30;
CompiladorLexer.NUM = 31;
CompiladorLexer.CADENA = 32;
CompiladorLexer.DEC = 33;
CompiladorLexer.SEMI = 34;
CompiladorLexer.WS = 35;



