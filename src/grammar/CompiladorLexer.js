// Generated from ./grammar/Compilador.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,39,225,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,1,1,1,1,1,3,1,
86,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,
25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,29,1,29,
1,30,1,30,1,31,1,31,1,32,1,32,1,33,4,33,188,8,33,11,33,12,33,189,1,34,4,
34,193,8,34,11,34,12,34,194,1,35,1,35,5,35,199,8,35,10,35,12,35,202,9,35,
1,35,1,35,1,36,4,36,207,8,36,11,36,12,36,208,1,36,1,36,4,36,213,8,36,11,
36,12,36,214,1,37,1,37,1,38,4,38,220,8,38,11,38,12,38,221,1,38,1,38,1,200,
0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
38,77,39,1,0,3,4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,
32,232,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
1,79,1,0,0,0,3,85,1,0,0,0,5,87,1,0,0,0,7,92,1,0,0,0,9,95,1,0,0,0,11,100,
1,0,0,0,13,107,1,0,0,0,15,110,1,0,0,0,17,116,1,0,0,0,19,120,1,0,0,0,21,123,
1,0,0,0,23,126,1,0,0,0,25,130,1,0,0,0,27,132,1,0,0,0,29,134,1,0,0,0,31,136,
1,0,0,0,33,138,1,0,0,0,35,140,1,0,0,0,37,142,1,0,0,0,39,144,1,0,0,0,41,147,
1,0,0,0,43,150,1,0,0,0,45,153,1,0,0,0,47,157,1,0,0,0,49,160,1,0,0,0,51,164,
1,0,0,0,53,167,1,0,0,0,55,170,1,0,0,0,57,176,1,0,0,0,59,178,1,0,0,0,61,180,
1,0,0,0,63,182,1,0,0,0,65,184,1,0,0,0,67,187,1,0,0,0,69,192,1,0,0,0,71,196,
1,0,0,0,73,206,1,0,0,0,75,216,1,0,0,0,77,219,1,0,0,0,79,80,5,43,0,0,80,81,
5,43,0,0,81,2,1,0,0,0,82,86,3,19,9,0,83,86,3,23,11,0,84,86,3,21,10,0,85,
82,1,0,0,0,85,83,1,0,0,0,85,84,1,0,0,0,86,4,1,0,0,0,87,88,5,108,0,0,88,89,
5,101,0,0,89,90,5,97,0,0,90,91,5,107,0,0,91,6,1,0,0,0,92,93,5,115,0,0,93,
94,5,105,0,0,94,8,1,0,0,0,95,96,5,101,0,0,96,97,5,108,0,0,97,98,5,115,0,
0,98,99,5,101,0,0,99,10,1,0,0,0,100,101,5,101,0,0,101,102,5,108,0,0,102,
103,5,102,0,0,103,104,5,105,0,0,104,105,5,116,0,0,105,106,5,111,0,0,106,
12,1,0,0,0,107,108,5,100,0,0,108,109,5,111,0,0,109,14,1,0,0,0,110,111,5,
119,0,0,111,112,5,104,0,0,112,113,5,105,0,0,113,114,5,108,0,0,114,115,5,
101,0,0,115,16,1,0,0,0,116,117,5,102,0,0,117,118,5,111,0,0,118,119,5,114,
0,0,119,18,1,0,0,0,120,121,5,110,0,0,121,122,5,99,0,0,122,20,1,0,0,0,123,
124,5,105,0,0,124,125,5,109,0,0,125,22,1,0,0,0,126,127,5,106,0,0,127,128,
5,103,0,0,128,129,5,108,0,0,129,24,1,0,0,0,130,131,5,42,0,0,131,26,1,0,0,
0,132,133,5,47,0,0,133,28,1,0,0,0,134,135,5,43,0,0,135,30,1,0,0,0,136,137,
5,45,0,0,137,32,1,0,0,0,138,139,5,61,0,0,139,34,1,0,0,0,140,141,5,62,0,0,
141,36,1,0,0,0,142,143,5,60,0,0,143,38,1,0,0,0,144,145,5,62,0,0,145,146,
5,61,0,0,146,40,1,0,0,0,147,148,5,60,0,0,148,149,5,61,0,0,149,42,1,0,0,0,
150,151,5,61,0,0,151,152,5,61,0,0,152,44,1,0,0,0,153,154,5,61,0,0,154,155,
5,61,0,0,155,156,5,61,0,0,156,46,1,0,0,0,157,158,5,33,0,0,158,159,5,61,0,
0,159,48,1,0,0,0,160,161,5,33,0,0,161,162,5,61,0,0,162,163,5,61,0,0,163,
50,1,0,0,0,164,165,5,124,0,0,165,166,5,124,0,0,166,52,1,0,0,0,167,168,5,
38,0,0,168,169,5,38,0,0,169,54,1,0,0,0,170,171,5,87,0,0,171,172,5,55,0,0,
172,173,5,72,0,0,173,174,5,76,0,0,174,175,5,77,0,0,175,56,1,0,0,0,176,177,
5,123,0,0,177,58,1,0,0,0,178,179,5,125,0,0,179,60,1,0,0,0,180,181,5,40,0,
0,181,62,1,0,0,0,182,183,5,41,0,0,183,64,1,0,0,0,184,185,5,33,0,0,185,66,
1,0,0,0,186,188,7,0,0,0,187,186,1,0,0,0,188,189,1,0,0,0,189,187,1,0,0,0,
189,190,1,0,0,0,190,68,1,0,0,0,191,193,7,1,0,0,192,191,1,0,0,0,193,194,1,
0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,70,1,0,0,0,196,200,5,34,0,0,197,
199,9,0,0,0,198,197,1,0,0,0,199,202,1,0,0,0,200,201,1,0,0,0,200,198,1,0,
0,0,201,203,1,0,0,0,202,200,1,0,0,0,203,204,5,34,0,0,204,72,1,0,0,0,205,
207,7,1,0,0,206,205,1,0,0,0,207,208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,
0,0,209,210,1,0,0,0,210,212,5,46,0,0,211,213,7,1,0,0,212,211,1,0,0,0,213,
214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,74,1,0,0,0,216,217,5,59,
0,0,217,76,1,0,0,0,218,220,7,2,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,219,
1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,6,38,0,0,224,78,1,0,0,0,
8,0,85,189,194,200,208,214,221,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompiladorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilador.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'++'", null, "'leak'", "'si'", "'else'", 
                         "'elfito'", "'do'", "'while'", "'for'", "'nc'", 
                         "'im'", "'jgl'", "'*'", "'/'", "'+'", "'-'", "'='", 
                         "'>'", "'<'", "'>='", "'<='", "'=='", "'==='", 
                         "'!='", "'!=='", "'||'", "'&&'", "'W7HLM'", "'{'", 
                         "'}'", "'('", "')'", "'!'", null, null, null, null, 
                         "';'" ];
	static symbolicNames = [ null, null, "PR", "IMPRESION", "IF_BASICO", "ELSE", 
                          "ELSE_IF", "DO", "WHILE", "FOR", "INT", "FLOAT", 
                          "CHAR", "MUL", "DIV", "ADD", "SUB", "ASIGNACION", 
                          "MAYORQ", "MENORQ", "MAYOR_IGUAL", "MENOR_IGUAL", 
                          "IGUALDAD_DEBIL", "IGUALDAD_FUERTE", "DIF_DEBIL", 
                          "DIF_FUERTE", "OR", "AND", "TPG", "ALLAVE", "CLLAVE", 
                          "APARENTESIS", "CPARENTESIS", "AADMIRACION", "ID", 
                          "NUM", "CADENA", "DEC", "SEMI", "WS" ];
	static ruleNames = [ "T__0", "PR", "IMPRESION", "IF_BASICO", "ELSE", "ELSE_IF", 
                      "DO", "WHILE", "FOR", "INT", "FLOAT", "CHAR", "MUL", 
                      "DIV", "ADD", "SUB", "ASIGNACION", "MAYORQ", "MENORQ", 
                      "MAYOR_IGUAL", "MENOR_IGUAL", "IGUALDAD_DEBIL", "IGUALDAD_FUERTE", 
                      "DIF_DEBIL", "DIF_FUERTE", "OR", "AND", "TPG", "ALLAVE", 
                      "CLLAVE", "APARENTESIS", "CPARENTESIS", "AADMIRACION", 
                      "ID", "NUM", "CADENA", "DEC", "SEMI", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompiladorLexer.EOF = antlr4.Token.EOF;
CompiladorLexer.T__0 = 1;
CompiladorLexer.PR = 2;
CompiladorLexer.IMPRESION = 3;
CompiladorLexer.IF_BASICO = 4;
CompiladorLexer.ELSE = 5;
CompiladorLexer.ELSE_IF = 6;
CompiladorLexer.DO = 7;
CompiladorLexer.WHILE = 8;
CompiladorLexer.FOR = 9;
CompiladorLexer.INT = 10;
CompiladorLexer.FLOAT = 11;
CompiladorLexer.CHAR = 12;
CompiladorLexer.MUL = 13;
CompiladorLexer.DIV = 14;
CompiladorLexer.ADD = 15;
CompiladorLexer.SUB = 16;
CompiladorLexer.ASIGNACION = 17;
CompiladorLexer.MAYORQ = 18;
CompiladorLexer.MENORQ = 19;
CompiladorLexer.MAYOR_IGUAL = 20;
CompiladorLexer.MENOR_IGUAL = 21;
CompiladorLexer.IGUALDAD_DEBIL = 22;
CompiladorLexer.IGUALDAD_FUERTE = 23;
CompiladorLexer.DIF_DEBIL = 24;
CompiladorLexer.DIF_FUERTE = 25;
CompiladorLexer.OR = 26;
CompiladorLexer.AND = 27;
CompiladorLexer.TPG = 28;
CompiladorLexer.ALLAVE = 29;
CompiladorLexer.CLLAVE = 30;
CompiladorLexer.APARENTESIS = 31;
CompiladorLexer.CPARENTESIS = 32;
CompiladorLexer.AADMIRACION = 33;
CompiladorLexer.ID = 34;
CompiladorLexer.NUM = 35;
CompiladorLexer.CADENA = 36;
CompiladorLexer.DEC = 37;
CompiladorLexer.SEMI = 38;
CompiladorLexer.WS = 39;



