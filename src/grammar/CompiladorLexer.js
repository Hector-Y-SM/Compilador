// Generated from ./grammar/Compilador.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,22,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
1,5,1,5,3,5,61,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,4,9,74,8,
9,11,9,12,9,75,1,10,4,10,79,8,10,11,10,12,10,80,1,11,4,11,84,8,11,11,11,
12,11,85,1,11,1,11,4,11,90,8,11,11,11,12,11,91,1,12,1,12,5,12,96,8,12,10,
12,12,12,99,9,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,4,21,120,8,21,11,21,12,21,121,1,
21,1,21,1,97,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,1,0,3,4,0,
48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,132,0,1,1,0,0,0,
0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,49,1,
0,0,0,5,51,1,0,0,0,7,53,1,0,0,0,9,55,1,0,0,0,11,60,1,0,0,0,13,62,1,0,0,0,
15,65,1,0,0,0,17,68,1,0,0,0,19,73,1,0,0,0,21,78,1,0,0,0,23,83,1,0,0,0,25,
93,1,0,0,0,27,102,1,0,0,0,29,104,1,0,0,0,31,106,1,0,0,0,33,108,1,0,0,0,35,
110,1,0,0,0,37,112,1,0,0,0,39,114,1,0,0,0,41,116,1,0,0,0,43,119,1,0,0,0,
45,46,5,84,0,0,46,47,5,80,0,0,47,48,5,71,0,0,48,2,1,0,0,0,49,50,5,123,0,
0,50,4,1,0,0,0,51,52,5,125,0,0,52,6,1,0,0,0,53,54,5,40,0,0,54,8,1,0,0,0,
55,56,5,41,0,0,56,10,1,0,0,0,57,61,3,13,6,0,58,61,3,15,7,0,59,61,3,17,8,
0,60,57,1,0,0,0,60,58,1,0,0,0,60,59,1,0,0,0,61,12,1,0,0,0,62,63,5,110,0,
0,63,64,5,99,0,0,64,14,1,0,0,0,65,66,5,105,0,0,66,67,5,109,0,0,67,16,1,0,
0,0,68,69,5,106,0,0,69,70,5,103,0,0,70,71,5,108,0,0,71,18,1,0,0,0,72,74,
7,0,0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,20,1,
0,0,0,77,79,7,1,0,0,78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,
0,0,81,22,1,0,0,0,82,84,7,1,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,
0,85,86,1,0,0,0,86,87,1,0,0,0,87,89,9,0,0,0,88,90,7,1,0,0,89,88,1,0,0,0,
90,91,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,24,1,0,0,0,93,97,5,34,0,0,94,
96,9,0,0,0,95,94,1,0,0,0,96,99,1,0,0,0,97,98,1,0,0,0,97,95,1,0,0,0,98,100,
1,0,0,0,99,97,1,0,0,0,100,101,5,34,0,0,101,26,1,0,0,0,102,103,5,61,0,0,103,
28,1,0,0,0,104,105,5,59,0,0,105,30,1,0,0,0,106,107,5,43,0,0,107,32,1,0,0,
0,108,109,5,45,0,0,109,34,1,0,0,0,110,111,5,42,0,0,111,36,1,0,0,0,112,113,
5,47,0,0,113,38,1,0,0,0,114,115,5,191,0,0,115,40,1,0,0,0,116,117,5,63,0,
0,117,42,1,0,0,0,118,120,7,2,0,0,119,118,1,0,0,0,120,121,1,0,0,0,121,119,
1,0,0,0,121,122,1,0,0,0,122,123,1,0,0,0,123,124,6,21,0,0,124,44,1,0,0,0,
8,0,60,75,80,85,91,97,121,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class CompiladorLexer extends antlr4.Lexer {

    static grammarFileName = "Compilador.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'TPG'", "'{'", "'}'", "'('", "')'", null, 
                         "'nc'", "'im'", "'jgl'", null, null, null, null, 
                         "'='", "';'", "'+'", "'-'", "'*'", "'/'", "'\\u00BF'", 
                         "'?'" ];
	static symbolicNames = [ null, null, null, null, null, null, "PR", "INT", 
                          "FLOAT", "CHAR", "ID", "NUM", "DEC", "CADENAS", 
                          "IGUAL", "SEMICOLON", "SUMA", "RESTA", "MULTIPLI", 
                          "DIVISION", "APREGUNTA", "CPREGUNTA", "WS" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "PR", "INT", 
                      "FLOAT", "CHAR", "ID", "NUM", "DEC", "CADENAS", "IGUAL", 
                      "SEMICOLON", "SUMA", "RESTA", "MULTIPLI", "DIVISION", 
                      "APREGUNTA", "CPREGUNTA", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

CompiladorLexer.EOF = antlr4.Token.EOF;
CompiladorLexer.T__0 = 1;
CompiladorLexer.T__1 = 2;
CompiladorLexer.T__2 = 3;
CompiladorLexer.T__3 = 4;
CompiladorLexer.T__4 = 5;
CompiladorLexer.PR = 6;
CompiladorLexer.INT = 7;
CompiladorLexer.FLOAT = 8;
CompiladorLexer.CHAR = 9;
CompiladorLexer.ID = 10;
CompiladorLexer.NUM = 11;
CompiladorLexer.DEC = 12;
CompiladorLexer.CADENAS = 13;
CompiladorLexer.IGUAL = 14;
CompiladorLexer.SEMICOLON = 15;
CompiladorLexer.SUMA = 16;
CompiladorLexer.RESTA = 17;
CompiladorLexer.MULTIPLI = 18;
CompiladorLexer.DIVISION = 19;
CompiladorLexer.APREGUNTA = 20;
CompiladorLexer.CPREGUNTA = 21;
CompiladorLexer.WS = 22;



